// vim: ft=dts

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25

// --- Key Position Macros ---
#define KEYS_L 0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44
#define KEYS_R 6 7 8 9 10 11 12 19 20 21 22 23 24 25 32 33 34 35 36 37 38 45 46 47 48 49 50 51
#define THUMBS 52 53 54 55 56 57 58 59 60 61 62 63

// --- Global Settings & Layer Names ---
#define QUICK_TAP_MS 175
#define THUMB_TAPPING_TERM 200

#define BASE_LAYER 0
#define NAV_LAYER 1
#define FN_LAYER 2
#define NUM_LAYER 3
#define MOUSE_LAYER 4
#define BOOOO_LAYER 5

// --- Includes ---
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/unicode-chars/portuguese.dtsi"
#include "zmk-helpers/unicode-chars/greek.dtsi"
#include "zmk-helpers/unicode-chars/currency.dtsi"

// --- Pointing Device Settings ---
&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };
&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };
&msc { acceleration-exponent = <1>; time-to-max-speed-ms = <100>; delay-ms = <0>; };
&mmv { time-to-max-speed-ms = <500>; acceleration-exponent = <1>; trigger-period-ms = <16>; };


// --- C Macros for Keymap Readability ---
#define SMART_NUM(LAYER) &smart_num_hold_tap LAYER LAYER

#define NAV_LEFT  &mt_nav_core HOME   LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &mt_nav_core END    RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt_nav_core LC(HOME) UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt_nav_core LC(END)  DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BSPC  &mt_nav_core LC(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt_nav_core LC(DEL)  DEL   // Tap: del   | Long-tap: delete word fwd.

#define COMMA_MORPH &comma_morph_level1
#define DOT_MORPH &dot_morph_level1
#define QMARK_EXCL_MORPH &qmark_excl_morph
#define COPY_CUT_DANCE &copy_cut_dance
#define PIN_WIN   &kp LG(LC(LS(Q)))
#define PIN_APP   &kp LG(LC(LS(A)))
#define DSK_MGR   &kp LA(GRAVE)

ZMK_BEHAVIOR(magic_shift_tap_action, mod_morph,
    bindings = <&adaptive_shift_repeat>, <&caps_word>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(adaptive_shift_repeat, adaptive_key,
    bindings = <&sk LSHFT>;
    repeat { trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>; bindings = <&key_repeat>; max-prior-idle-ms = <1200>; strict-modifiers; };
)
ZMK_HOLD_TAP(magic_shift_hold_tap,
    bindings = <&kp>, <&magic_shift_tap_action>;
    flavor = "balanced";
    tapping-term-ms = <THUMB_TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
)
ZMK_BEHAVIOR(num_tap_dance, tap_dance,
    bindings = <&tog NUM_LAYER>, <&sl NUM_LAYER>;
    tapping-term-ms = <THUMB_TAPPING_TERM>;
)
ZMK_HOLD_TAP(smart_num_hold_tap,
    bindings = <&mo>, <&num_tap_dance>;
    flavor = "balanced";
    tapping-term-ms = <THUMB_TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
)
ZMK_MACRO(dot_space_macro, bindings = <&kp DOT &kp SPACE &sk LSHFT>; wait-ms = <0>; tap-ms = <5>;)
ZMK_BEHAVIOR(space_morph_action, mod_morph,
    bindings = <&kp SPACE>, <&dot_space_macro>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_HOLD_TAP(lt_space_nav_layer,
    bindings = <&mo>, <&space_morph_action>;
    flavor = "balanced";
    tapping-term-ms = <THUMB_TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP_MS>;
)
ZMK_UNICODE_PAIR(pt_o_tilde, N0, N0, F, N5, N0, N0, D, N5)
/ {
    behaviors {
        HomeRowModLeft: HomeRowModLeft {
            compatible = "zmk,behavior-hold-tap"; label = "HOMEROWMODLEFT";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>; flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <150>;
            hold-trigger-on-release; hold-trigger-key-positions = <KEYS_R THUMBS>;
        };
        HomeRowModRight: HomeRowModRight {
            compatible = "zmk,behavior-hold-tap"; label = "HOMEROWMODRIGHT";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>; flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <150>;
            hold-trigger-on-release; hold-trigger-key-positions = <KEYS_L THUMBS>;
        };
        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate"; #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>; tap-ms = <100>;
        };
        mt_nav_core: mt_nav_core {
            compatible = "zmk,behavior-hold-tap"; label = "MT_NAV_CORE";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>; flavor = "tap-preferred";
            tapping-term-ms = <220>; quick-tap-ms = <220>;
        };
        leader_main: leader_main {
            compatible = "zmk,behavior-leader-key"; label = "LEADER";
            #binding-cells = <0>;
            ignore-keys = <LSHFT RSHFT>;
            sequence_sys_reset { bindings = <&sys_reset>; sequence = <R E S E T>; };
            sequence_paste { bindings = <&kp LS(INS)>; sequence = <P>; };
            // Portuguese sequences
            // sequence_cedilla { bindings = <&pt_c_cedilla>; sequence = <C COMMA>; };
            // sequence_a_acute { bindings = <&pt_aa>; sequence = <A APOS>; };
            // sequence_e_acute { bindings = <&pt_e_acute>; sequence = <E APOS>; };
            // sequence_o_acute { bindings = <&pt_oa>; sequence = <O APOS>; };
            // sequence_a_tilde { bindings = <&pt_a_tilde>; sequence = <A TILDE>; };
            // sequence_o_tilde { bindings = <&pt_o_tilde>; sequence = <O TILDE>; };
            // sequence_a_circ { bindings = <&pt_a_circumflex>; sequence = <A CARET>; };
            // sequence_e_circ { bindings = <&pt_e_circumflex>; sequence = <E CARET>; };
            // sequence_o_circ { bindings = <&pt_o_circumflex>; sequence = <O CARET>; };
            // sequence_a_grave { bindings = <&pt_a_grave>; sequence = <A GRAVE>; };
            // // Greek sequences
            // el_alpha {bindings = <&el_alpha>;    sequence = <G A>; };  // α
            // el_beta {bindings = <&el_beta>;    sequence = <G B>; };  // β
            // el_gamma {bindings = <&el_gamma>;    sequence = <G G>; };  // γ
            // el_delta {bindings = <&el_delta>;    sequence = <G D>; };  // δ
            // el_epsilon {bindings = <&el_epsilon>;    sequence = <G E>; };  // ε
            // el_zeta {bindings = <&el_zeta>;    sequence = <G Z>; };  // ζ
            // el_eta {bindings = <&el_eta>;    sequence = <G H>; };  // η
            // el_theta {bindings = <&el_theta>;    sequence = <G V>; };  // θ
            // el_iota {bindings = <&el_iota>;    sequence = <G I>; };  // ι
            // el_kappa {bindings = <&el_kappa>;    sequence = <G K>; };  // κ
            // el_lambda {bindings = <&el_lambda>;    sequence = <G L>; };  // λ
            // el_mu {bindings = <&el_mu>;    sequence = <G M>; };  // μ
            // el_nu {bindings = <&el_nu>;    sequence = <G N>; };  // ν
            // el_xi {bindings = <&el_xi>;    sequence = <G X>; };  // ξ
            // el_omikron {bindings = <&el_omikron>;    sequence = <G O>; };  // ο
            // el_pi {bindings = <&el_pi>;    sequence = <G P>; };  // π
            // el_rho {bindings = <&el_rho>;    sequence = <G R>; };  // ρ
            // el_sigma {bindings = <&el_sigma>;    sequence = <G S>; };  // σ
            // el_tau {bindings = <&el_tau>;    sequence = <G T>; };  // τ
            // el_upsilon {bindings = <&el_upsilon>;    sequence = <G U>; };  // υ
            // el_phi {bindings = <&el_phi>;    sequence = <G F>; };  // ϕ
            // el_chi {bindings = <&el_chi>;    sequence = <G C>; };  // χ
            // el_psi {bindings = <&el_psi>;    sequence = <G Y>; };  // ψ
            // el_omega {bindings = <&el_omega>;    sequence = <G W>; };  // ω
            // // Currency symbols
            // curr_dollar { bindings = <&curr_dollar>; sequence = <M D>; };
            // curr_pound { bindings = <&curr_pound>; sequence = <M P>; };
            // curr_cent { bindings = <&curr_cent>; sequence = <M C>; };
            // curr_euro { bindings = <&curr_euro>; sequence = <M E>;};
            // curr_bitcoin { bindings = <&curr_bitcoin>; sequence = <M B>; };
        };
        comma_morph_level1: comma_morph_level1 { compatible = "zmk,behavior-mod-morph"; label = "COMMA_L1"; #binding-cells = <0>; bindings = <&kp COMMA>, <&comma_morph_level2>; mods = <(MOD_LSFT|MOD_RSFT)>; };
        comma_morph_level2: comma_morph_level2 { compatible = "zmk,behavior-mod-morph"; label = "COMMA_L2"; #binding-cells = <0>; bindings = <&kp SEMICOLON>, <&kp LT>; mods = <(MOD_LCTL|MOD_RCTL)>; };
        dot_morph_level1: dot_morph_level1 { compatible = "zmk,behavior-mod-morph"; label = "DOT_L1"; #binding-cells = <0>; bindings = <&kp DOT>, <&dot_morph_level2>; mods = <(MOD_LSFT|MOD_RSFT)>; };
        dot_morph_level2: dot_morph_level2 { compatible = "zmk,behavior-mod-morph"; label = "DOT_L2"; #binding-cells = <0>; bindings = <&kp COLON>, <&kp GT>; mods = <(MOD_LCTL|MOD_RCTL)>; };
        qmark_excl_morph: qmark_excl_morph { compatible = "zmk,behavior-mod-morph"; label = "QMARK_EXCL"; #binding-cells = <0>; bindings = <&kp QMARK>, <&kp EXCL>; mods = <(MOD_LSFT|MOD_RSFT)>; };
        copy_cut_dance: copy_cut_dance { compatible = "zmk,behavior-tap-dance"; label = "COPY_CUT"; #binding-cells = <0>; tapping-term-ms = <200>; bindings = <&kp LC(C)>, <&kp LC(X)>; };
    };

    combos {
        compatible = "zmk,combos";
        MouseLayerToggle { bindings = <&tog MOUSE_LAYER>; key-positions = <44 46>; timeout-ms = <50>; };
        CopyCutCombo { bindings = <COPY_CUT_DANCE>; key-positions = <41 42>; timeout-ms = <50>; };
    };

    keymap {
        compatible = "zmk,keymap";
        layer_0 {
            display-name = "BASE";
            bindings = <
                &kp GRAVE       &kp N1          &kp N2          &kp N3          &kp N4          &kp N5          &kp UP      &kp N6          &kp N7          &kp N8          &kp N9          &kp N0          &kp EQUAL
                &kp TAB         &kp Q           &kp W           &kp E           &kp R           &kp T           &kp DOWN    &kp Y           &kp U           &kp I           &kp O           &kp P           &kp APOS
                &kp ESC         &HomeRowModLeft LGUI A  &HomeRowModLeft LALT S &HomeRowModLeft LCTRL D &HomeRowModLeft LSHFT F          &kp G           &kp LEFT    &kp H           &HomeRowModRight RSHFT J &HomeRowModRight LCTRL K &HomeRowModRight LALT L &HomeRowModRight LGUI SEMI       &kp MINUS
                &kp LBKT        &kp Z           &kp X           &kp C           &kp V           &kp B           &kp RIGHT   &kp N           &kp M           &kp COMMA     &kp DOT       &kp SLASH  &kp RBKT
                /* Thumbs (52-63) */
                &kp C_MUTE &kp C_AC_SEARCH &mo BOOOO_LAYER  &leader_main &lt_space_nav_layer NAV_LAYER 0 &lt FN_LAYER RET
                &kp ENTER  &kp BSPC &magic_shift_hold_tap LSHFT 0 &smart_num_hold_tap NUM_LAYER 0 &kp K_CONTEXT_MENU &kp BACKSLASH
            >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer_1 {
            display-name = "NAV";
            bindings = <
                &trans &trans     &trans   &trans     &trans    &trans &mmv MOVE_UP    &trans     &trans     &trans &trans &trans &trans
                &trans &kp LA(F4) &trans &trans &trans &trans &mmv MOVE_DOWN    &kp PG_UP  NAV_BSPC NAV_UP NAV_DEL &trans &trans
                &trans &sk LGUI   &sk LALT &sk LCTRL  &sk LSHFT &trans &mmv MOVE_LEFT   &kp PG_DN  NAV_LEFT   NAV_DOWN NAV_RIGHT &kp RET  &trans
                &trans &trans     &trans   &trans     &kp LS(TAB)    &trans &mmv MOVE_RIGHT    &kp INS    &kp TAB    &trans &trans &trans &trans
                /* Thumbs (52-63) */
                &trans &trans &trans &trans &trans &trans
                &mkp LCLK &trans &trans &kp K_CANCEL &trans &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            display-name = "FN";
            bindings = <
                &trans &trans    &trans     &trans     &trans     &trans &trans    &trans &trans &trans &trans   &trans     &trans
                &trans &kp F12    &kp F7     &kp F8     &kp F9     &trans &trans    &trans &kp C_PREV     &kp C_VOL_UP       &kp C_NEXT       &trans     &trans
                &trans &HomeRowModLeft LGUI F11  &HomeRowModLeft LALT F4 &HomeRowModLeft LCTRL F5 &HomeRowModLeft LSHFT F6   &trans &trans    &trans &HomeRowModRight RSHIFT LG(LC(LEFT))     &HomeRowModRight LCTRL C_VOL_DN      &HomeRowModRight LALT LG(LC(RIGHT))       &trans     &trans
                &trans &kp F10     &kp F1     &kp F2     &kp F3     &trans &trans    PIN_APP PIN_WIN     DSK_MGR       &trans       &trans     &trans
                /* Thumbs (52-63) */
                &trans &trans &trans &trans &trans     &trans
                &trans &kp C_MUTE &kp C_PP &trans &trans     &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "NUM";
            bindings = <
                &trans &kp EXCL  &kp AT &kp HASH &kp DOLLAR &kp PERCENT &trans    &kp CARET &kp AMPERSAND &kp ASTERISK &kp LPAR &kp RPAR &trans
                &trans &trans &kp N7 &kp N8 &kp N9 &trans &trans    &trans &trans &trans &trans &trans &trans
                &trans &HomeRowModLeft LGUI N0  &HomeRowModLeft LALT N4 &HomeRowModLeft LCTRL N5 &HomeRowModLeft LSHFT N6 &trans &trans    &trans &trans &trans &trans &trans &trans
                &trans &trans &kp N1 &kp N2 &kp N3 &trans &trans    &trans &trans &trans &trans &trans &trans
                /* Thumbs (52-63) */
                &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        layer_4 {
            display-name = "MOUSE";
            bindings = <
                &trans &trans &trans &trans &trans &trans &kp UP    &trans   &trans    &trans    &trans    &trans &trans
                &trans &trans &trans &trans &trans &trans &kp DOWN    &trans   &kp PG_UP &mmv MOVE_UP &kp PG_DN &trans &trans
                &trans &trans &trans &trans &trans &trans &kp LEFT    &msc SCRL_LEFT &mmv MOVE_LEFT  &mmv MOVE_DOWN &mmv MOVE_RIGHT  &msc SCRL_RIGHT &trans
                &trans &trans &trans &trans &trans &trans &kp RIGHT    &trans  &mkp LCLK &mkp MCLK &mkp RCLK &trans &trans
                /* Thumbs (52-63) */
                &trans &trans &trans &trans &msc SCRL_UP &msc SCRL_DOWN
                &kp ENTER &trans &trans &trans &trans &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        layer_5 {
            display-name = "BoOoO";
            bindings = <
                &trans       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &trans    &trans          &trans        &trans        &trans        &trans     &trans
                &trans       &trans       &bt BT_PRV   &bt BT_NXT   &trans       &trans &trans    &rgb_ug RGB_TOG &rgb_ug RGB_SPD &rgb_ug RGB_SPI &trans        &trans     &trans
                &trans       &trans       &bootloader  &sys_reset   &soft_off    &trans &trans    &rgb_ug RGB_EFR &rgb_ug RGB_BRD &rgb_ug RGB_BRI &rgb_ug RGB_EFF &trans     &trans
                &trans       &trans       &bt BT_CLR_ALL &bt BT_CLR &trans       &out OUT_TOG &trans &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_HUI &rgb_ug RGB_SAI &trans     &trans
                /* Thumbs (52-63) */
                &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
